import random

a, b, c, d, e, f, g, h = range(8)  # nodes

A = [  # adjacency matrix of infection rate
    [0, random.uniform(0.5, 0.8), random.uniform(0.5, 0.8), random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8), 0,
     0],
    [random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8), 0, 0, 0, 0, 0],
    [random.uniform(0.5, 0.8), random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8), 0,
     0],
    [random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8),
     random.uniform(0.5, 0.8)],
    [0, 0, 0, random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8), 0, 0],
    [random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8), 0, random.uniform(0.5, 0.8), 0, 0],
    [0, 0, 0, random.uniform(0.5, 0.8), 0, 0, 0, random.uniform(0.5, 0.8)],
    [0, 0, 0, random.uniform(0.5, 0.8), 0, 0, random.uniform(0.5, 0.8), 0]
]

N = 8  # number of nodes

Cn = [random.randint(10, 20) for _ in range(N)]  # the cost of vaccine

no = 5  # number of nodes generated by each node
CR = 0.7  # rate of crossover
T_DE = 20  # iteration of DE
gamma = 0.6  # curing rate

""":parameter k and F: for current/rand/1"""
k = 0.5
F = 0.8


# class of X
class X:
    delta = []
    fit = 0

    def __init__(self):
        self.delta = [random.uniform(0, 1) for _ in range(N)]
        self.fit = self.fitness_value()

    def init(self, delta):
        self.delta = delta
        self.fit = self.fitness_value()

    def fitness_value(self):
        """
        fitness_value
        :param self:   list of vaccination rate
        :return:    fitness value
        """

        fitness = 0
        for i in range(N):
            fitness += self.delta[i] * Cn[i]
        return fitness


def current_to_rand(r_list, x_list, i):
    v_delta = []
    for j in range(N):
        current_delta = x_list[i].delta[j] + \
                        k * (x_list[r_list[0]].delta[j] - x_list[i].delta[j]) + \
                        F * (x_list[r_list[1]].delta[j] - x_list[r_list[2]].delta[j])
        v_delta.append(current_delta)
    return v_delta


x_list = []  # list of vectors
v_list = []
for i in range(N):  # initialize x_list
    p = X()
    x_list.append(p)

t = 1

while t <= T_DE:
    for i in range(N):
        for j in range(no):
            r_list = []  # list of indexes of random nodes
            while len(r_list) == 3:  # generate the list
                r = random.randint(1, N)
                if r != i:
                    r_list.append(r)
            vj = X(current_to_rand(r_list, x_list, i))
    t = t + 1

